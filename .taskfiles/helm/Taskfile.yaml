---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TEST_CLUSTER_NAME: "test"
  TEST_DOMAIN: "example.com"
  TEST_TIMEZONE: "UTC"

tasks:
  validation:
    desc: Validate all helm charts by running helm template
    summary: |
      Validates all helm charts in the repository by running helm template
      on each chart to ensure they generate valid Kubernetes manifests.
    silent: true
    cmds:
      - echo "üîç Validating helm charts..."
      - |
        for category in charts/*/; do
          if [ -d "$category" ]; then
            category_name=$(basename "$category")
            for chart_dir in "$category"*/; do
              if [ -f "$chart_dir/Chart.yaml" ]; then
                chart_name=$(basename "$chart_dir")
                # Remove trailing slash from chart_dir
                chart_path=${chart_dir%/}
                if helm template "$chart_name" "$chart_path" \
                  --values "$chart_path/values.yaml" \
                  --set cluster.name={{.TEST_CLUSTER_NAME}} \
                  --set cluster.top_level_domain={{.TEST_DOMAIN}} \
                  --set cluster.timezone={{.TEST_TIMEZONE}} \
                  > /dev/null 2>&1; then
                  echo "  ‚úÖ $chart_name - PASSED"
                else
                  echo "  ‚ùå $chart_name - FAILED"
                  echo "  Running helm template for debugging:"
                  helm template "$chart_name" "$chart_path" \
                    --values "$chart_path/values.yaml" \
                    --set cluster.name={{.TEST_CLUSTER_NAME}} \
                    --set cluster.top_level_domain={{.TEST_DOMAIN}} \
                    --set cluster.timezone={{.TEST_TIMEZONE}}
                  exit 1
                fi
              fi
            done
          fi
        done
      - echo "‚úÖ All helm charts validated successfully!"

  lint:
    desc: Run helm lint on all charts
    summary: |
      Runs helm lint on all charts to check for issues and best practices.
    silent: true
    cmds:
      - echo "üîç Linting helm charts..."
      - |
        for category in charts/*/; do
          if [ -d "$category" ]; then
            category_name=$(basename "$category")
            for chart_dir in "$category"*/; do
              if [ -f "$chart_dir/Chart.yaml" ]; then
                chart_name=$(basename "$chart_dir")
                # Remove trailing slash from chart_dir
                chart_path=${chart_dir%/}
                if helm lint "$chart_path" \
                  --values "$chart_path/values.yaml" \
                  --set cluster.name={{.TEST_CLUSTER_NAME}} \
                  --set cluster.top_level_domain={{.TEST_DOMAIN}} \
                  --set cluster.timezone={{.TEST_TIMEZONE}} \
                  > /dev/null 2>&1; then
                  echo "  ‚úÖ $chart_name - PASSED"
                else
                  echo "  ‚ùå $chart_name - FAILED"
                  echo "  Running helm lint for debugging:"
                  helm lint "$chart_path" \
                    --values "$chart_path/values.yaml" \
                    --set cluster.name={{.TEST_CLUSTER_NAME}} \
                    --set cluster.top_level_domain={{.TEST_DOMAIN}} \
                    --set cluster.timezone={{.TEST_TIMEZONE}}
                  exit 1
                fi
              fi
            done
          fi
        done
      - echo "‚úÖ All helm charts linted successfully!"

  validate-icons:
    desc: Validate icon fields in helm charts (online by default)
    summary: |
      Validates icon fields in values.yaml files, checks format consistency,
      suggests defaults for missing icons, and verifies icons exist in the
      Iconify database by making API calls. Uses online validation by default.
    silent: true
    cmds:
      - chmod +x scripts/validate-icons.sh
      - scripts/validate-icons.sh --online

  validate-icons-offline:
    desc: Validate icon fields in helm charts (offline mode)
    summary: |
      Validates icon fields in values.yaml files, checks format consistency,
      and suggests defaults for missing icons based on application type.
      This performs offline validation only without API calls.
    silent: true
    cmds:
      - chmod +x scripts/validate-icons.sh
      - scripts/validate-icons.sh

  validate-all:
    desc: Run all validation tasks on helm charts (online by default)
    summary: |
      Comprehensive validation that runs helm template validation,
      helm lint, and online icon validation on all charts.
    cmds:
      - task: validation
      - task: lint
      - task: validate-icons

  validate-all-offline:
    desc: Run all validation tasks on helm charts (offline mode)
    summary: |
      Comprehensive validation that runs helm template validation,
      helm lint, and offline icon validation on all charts.
    cmds:
      - task: validation
      - task: lint
      - task: validate-icons-offline
